package com.oc.programmer.objectives.streams;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;

/**
 * Create a stream containing all the words in the all sentences without repetition
 */
public class StreamFlatMap {

  public static void main(String[] args) {

    String sentenceKH3D = "Hearts are made of the people we meet, and how we feel about them â€” they're what ties us together even when we're apart! They're what...make me strong.";
    String sentenceNiNoKuni = "When things go wrong, you have to try and make them right. And you have to keep on trying, no matter how hard it gets. That's what life is all about.";
    String sentencePersona5 = "Being at the peak may mean you are mere moments from your downfall.";
    String sentenceFinalFantasy9 = "To be forgotten is worse than death.";
    String sentenceBravelyDefault = "There are no certainties in life. Righteousness and truth have a different meaning to each and every one of us. If you try to see the world as only black and white, you'll lose sight of its true nature.";
    List<String> sentences = Arrays
        .asList(sentenceKH3D, sentenceNiNoKuni, sentencePersona5, sentenceFinalFantasy9, sentenceBravelyDefault);

    /**
     * The flatMap method replaces one element of a stream with elements of a new stream generated using the original element.
     * Here, the original elements are the sentences. Each of these elements are replaced in the stream with
     * the elements generated by applying str.split("[ ,.!?\r\n]", which basically converts the stream of sentences into a stream of words.
     *
     * The stream is now filtered and only the elements where the length is >0 are allowed to be in the stream.
     *
     * Finally, distinct removes all the duplicates.
     */
    Stream<String> lifeStream = sentences.stream()
        .flatMap(str -> Stream.of(str.split("[ ,.!?\r\n]")))  // flatMap expects a Function object that returns a Stream, hence Stream.of
        .filter(s -> s.length() > 0)
        .distinct();

    //TODO get most occurring words in all total sentences w/streams

    lifeStream.forEach(System.out::println);
  }
}
